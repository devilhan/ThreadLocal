    Thread 就是传统的线程类 -- 继承Runnable接口
    ThreadLocal 就是用来放到普通类中作为线程安全的对象
    ThreadLocalMap 是 ThreadLocal的内部类。 每个Thread内部有一个ThreadLocalMap的引用
    Entry 是 ThreadLocalMap 的内部类。作为其实就是一个存放value的包装
    
    
    强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾回收器绝不会回收它。 
    当内存空间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足的问题。
    
    如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。
    SoftReference soft = new SoftReference<>(new Integer(“23456”));

    弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。
    WeakReference weak = new WeakReference<>(new Integer(“23456”));

    “虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。
    ReferenceQueue intRq = new ReferenceQueue<>();
    PhantomReference phantom = new PhantomReference<>(new Integer(“23456”),intRq);
    Integer phantomNum = phantom.get();
    System.out.println(phantomNum == null);
    
    看完定义是不是还是一头雾水。为啥Entry要用WeakReference, 可以不可以用强引用或者软引用， 再回头来看看threadlocalMap 的实现。
    key 是threadlocal对象本身。 
    
    保存的value如果换成强引用或者软引用?
    设想一个场景。
    每次Thread进来，有了一个threadLocal对象，然后set了一个value ，然后强行 threadLocal对象赋值null ，
    如果value是强引用，那估计只有等到jvm完蛋这个value对象才能被回收。如果换成软引用，也要等到内存空间不够了才能被回收。
    有些thread的生命周期是很长，长到跟整个jvm周期一样长。这样等同于不能被回收。所以说这两种情况的entry都有不能垃圾回收的隐患。
    从语言来说是不能接受的。所以只能是弱引用，哪怕设置成null。只要垃圾回收开始就要回收。 
    当然这只解决了entry被回收的情况，也就是默认threadlocalMap对象保存的value也是null的，但是threadlocal本身呢，
    一旦entry被回收，里头value可是强引用，啥时候被回收，也就是内存泄漏问题，解决办法是ThreadLocal里头增加remove方法。使用之后强制remove


